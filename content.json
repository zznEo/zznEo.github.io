{"meta":{"title":"Never Give Up!","subtitle":null,"description":null,"author":"nEo.大魔王","url":"http://yoursite.com","root":"/"},"pages":[{"title":"分类","date":"2019-07-14T08:02:25.000Z","updated":"2019-07-14T11:54:01.166Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"ABOUT","date":"2019-07-11T13:05:04.000Z","updated":"2019-07-31T07:32:06.710Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"Me 蒟蒻ACMer&nbsp;|&nbsp;C++&nbsp;|&nbsp;数据结构&nbsp;|&nbsp;算法 Timeline 人生经历 2018.09.07 &nbsp;&nbsp;&nbsp; 考入NYIST 2019.02.28 &nbsp;&nbsp;&nbsp; Fall in love with her 比赛经历 2018.10.27 &nbsp;&nbsp;&nbsp; 加入软院ACM集训队 2019.01.05 &nbsp;&nbsp;&nbsp; 郑州轻工业大学–“卓见杯” 河南省高校邀请赛 金奖 兴趣 2019.07.14 &nbsp;&nbsp;&nbsp; 迁移 Blog 至公网服务器 To Honorary Man这个网站的搭设离不开我的好学长，ACM的好队员，人民群众的好榜样: &nbsp; zzzhy他确实是一名德艺双馨的人民老艺术家，在这段时间给了我很多帮助。没有&nbsp;zzzhy，就不会有这个网站。感谢他。阿门。"},{"title":"标签","date":"2019-07-14T08:02:32.000Z","updated":"2019-07-14T11:54:21.401Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"NYIST-软件ACM集训队招新介绍","slug":"关于ACM","date":"2019-07-31T05:49:05.000Z","updated":"2019-07-31T07:59:26.539Z","comments":true,"path":"2019/07/31/关于ACM/","link":"","permalink":"http://yoursite.com/2019/07/31/关于ACM/","excerpt":"","text":"前言Q：想锻炼自己的编程能力？ Q：想与全世界的算法爱好者切磋？ Q：想在工作、考研中获得优势？ Q：想不虚度大学光阴，找到可以奋斗四年的目标？ Q：想成为 Legendary Grandmaster（大佬）？ A：欢迎加入 软件学院 ACM 集训队! 你离精英只差一个 ACM的距离！ 什么是ACM？ACM 国际大学生程序设计竞赛（英文全称：ACM International Collegiate Programming Contest，简称 ACM-ICPC 或 ICPC）是由国际计算机协会（ACM）主办的，一项旨在展示大学生创新能力、团队精神和在压力下编写程序、分析和解决问题能力的年度竞赛。经过近 40年的发展，ACM 国际大学生程序设计竞赛已经发展成为全球最具影响力的大学生程序设计竞赛。赛事目前由 IBM 公司赞助。2017 年教育部发布《中国高校创新人才培养暨学科竞赛评估结果》，ACM-ICPC 是十九项竞赛评估指标中，唯一入选的计算机程序设计类竞赛，足以可见其对于大学生学科创新能力培养的重要性。 软件学院 ACM-ICPC 实训室 依托于南阳理工学院软件学院，ACM-ICPC 实训室重建与2015年，从刚开始的 3、4 个人发展到目前稳定 40 人左右的规模。实验室现位于南阳理工学院软件学院五楼中 507 510 512 房间。拥有集训队自己的训练地方，不仅可供集训队内成员平日训练，也可退役后在这里考研，深造。且集训室内拥有自己的冰箱！。 历经 5 年，实验室在 ACM-ICPC 亚洲区域赛、 ACM-CCPC 分站赛、中国高校天梯赛、蓝桥杯、河南省赛等国际、国家、省级各类比赛中斩获金、银、铜百余奖项。前方有一大批图片来袭： 收获奖项的同时，玩 ACM 竞赛到底会给我们带来哪些益处呢？让我们一一道来： 不管在什么时候，算法都是计算机科学领域最重要的基石之一。ACMer扎实的算法基础和编程能力更受企业青睐。 据非官方统计，在 ACM 区域赛上拿到铜牌 20W 年薪的工作妥妥的，银牌 30W，金牌 50W 到无上限，但归根结底还是要自己努力付出，才会有收获。(薪资仍在不断上升！) 软件ACM集训队是我校竞争力最强的工作室之一，每年软件ACM集训队都会派出队伍参加ACM亚洲区域赛，国赛，省赛以及各种程序设计竞赛，并多次取得不俗的成绩。 玩 ACM， C 程序设计、数据结构、算法、离散数学等等这些对于大多数同学有难度的课程直接躺过，拿高分也很容易。 软件ACM集训队提供了一个良好的学习环境，学习，其实最重要的是环境。 与全国各大高校同台竞技，开阔视野，让你见识到这个领域内最牛逼的那一批同龄人是怎样的水准，自己距离他们有多大的差距。 很多往届学长在 BAT 腾讯 百度 旷视 字节跳动 等知名公司就职，会有很多内推机会。 考研的面试、笔试、上机，对于 ACMer 来说，小儿科。学好算法，对以后的深造有极大帮助，研究生导师都很喜欢算法 NB的学生。 在ACM集训队中学习，学到的不仅仅是相关的算法知识，更重要的是学到了能自主学习，自主攻克难关的能力。强大的学习能力在任何地方都是适用的。 玩 ACM 可以结交很多来自全国其他各个高校的朋友，而且都是精英中的精英。自行脑补与清华、北大等学校同台竞技的感觉！ 公费旅游 每年的区域赛都在全国各地举办，例如北京（烤鸭）、青岛（大虾）、沈阳（乱炖）、杭州（醋鱼）、西安（肉夹馍）……，在不同的城市、不同的大学比赛，可以感受不同的文化。 下面最关键的问题来了，到底如何加入 ACM 集训队呢？集训队遵循公平公正的选拔原则，不论年级、专业，只要参加ACM集训队线下招新赛成绩较好，有能力、激情、肯吃苦的同学就可以加入集训队。有同学说，我能力不够怎么办。咱们说，不用着急，只要你踏实努力了，我们每年有多次选拔的机会在等你! 我们会在军训结束后进行简单的C语言培训，国庆期间也会组织有关C语言和简单算法的集训，所有人都可以报名参加。不要担心零基础的问题，我们保证讲到你们听懂为止。我们会在集训后举办一系列的招选拔赛和月赛，根据名次来决定具体的人选，具体请加入2019软件ACM迎新群:791901837 其他 首先感谢人民艺术家:zzzhy先生的技术支持,及文章推送 不论是学习，生活还是什么方面的问题都会有学长学姐耐心解答。 如果高中有信息学竞赛（OI）的经历，可以直接联系我们 最终解释权归南阳理工学院软件学院ACM集训队所有 闲谈首先,我们都应该清楚,南阳理工学院作为一个双非院校(中原小清华),我们的形式是非常严峻的。计算机行业是当下的热门行业,它很好就业,且薪资待遇良好。可仔细想想,每年985 211 双一流院校的计算机,软件相关毕业生多的不计其数,那些知名企业为什么要选择一个资历平平的你进入公司,去拿这份高薪?你们应该都听说过996的工作制,也都听说过程序员就是新世纪的农民–码农,也都听说过程序员行业寿命短,中年失业等等等等。这也是大多数程序员的通病。可是如今人工智能产业火爆,AI技术越来越精进,计算机类产业的高端人才严重缺失,但中低端技术人员缺已经饱和。大批的算法岗位空缺,且薪资待遇都优于其他开发岗位。可以在任何求职网站上搜索算法工程师,他们的薪资都是非常诱人的。 而在我院,ACM集训队是唯一一个教授算法的地方,也是唯一一个能让你成为算法工程师的地方。不要听言ACM集训队只会刷题,不会做项目,后面找不到工作。这一切都是无稽之谈。你能想象到,你在公司实习时能接触到的项目,和你在学校内的项目能学到的东西是没有可比性的!算法是程序之根本,你能掌握程序的核心还怕找不到工作么?那些项目相关的知识对于学习能力强大的ACMer来说真的易如反掌。15级学长 ps:(你觉得学会一种语言需要多久? 七天就够)对于双非院校的我们来说ACM绝对是一条逆袭的道路,它让我们未来在职场能和 985 211 双一流院校毕业的学生一样有着同等的竞争力。加入软件学院ACM集训队,挑战自己,成就自己!","categories":[{"name":"ACM","slug":"ACM","permalink":"http://yoursite.com/categories/ACM/"}],"tags":[{"name":"什么是ACM？","slug":"什么是ACM？","permalink":"http://yoursite.com/tags/什么是ACM？/"}]},{"title":"Lougu3865（ST表 + 倍增思想）","slug":"Lougu3865（ST表+倍增思想）","date":"2019-07-15T02:54:17.000Z","updated":"2019-07-17T07:02:19.254Z","comments":true,"path":"2019/07/15/Lougu3865（ST表+倍增思想）/","link":"","permalink":"http://yoursite.com/2019/07/15/Lougu3865（ST表+倍增思想）/","excerpt":"描述给定一个长度为 N N 的数列，和 M M 次询问，求出每一次询问的区间内数字的最大值。","text":"描述给定一个长度为 N N 的数列，和 M M 次询问，求出每一次询问的区间内数字的最大值。 输入输出格式输入格式：第一行包含两个整数 N , M 分别表示数列的长度和询问的个数。 第二行包含 N N 个整数（记为 ai a i)，依次表示数列的第 i 项。 接下来 M行，每行包含两个整数 li, ri，表示查询的区间为 [ li, ri]输出格式：输出包含 M M行，每行一个整数，依次表示每一次询问的结果。输入输出样例输入样例1： 8 89 3 1 7 5 6 0 81 61 52 72 61 84 83 71 8 输出样例1： 99779879 题解 显然这是一道ST表的模板题。~ 但是重点在于倍增的思想。相比于二分，我们每次对于一个序列进行÷2的折半查找，而倍增则是每次对于序列×2的查 找。对于倍增一个很好的运用就是RMQ。~(在？为什么不是LCA)~RMQ就是维护静态区间极值问题，预处理的时间复杂度为O(n*logn)，查询为O(1),对于 这道模板题，就必须是O(1)的输出。 什么是倍增？倍增用到了2进制的思想。我们把数组分割为","categories":[],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/数据结构/"}]},{"title":"Luogu1338 末日传说","slug":"LuoguP1338","date":"2019-07-14T09:41:40.000Z","updated":"2019-07-14T11:56:11.601Z","comments":true,"path":"2019/07/14/LuoguP1338/","link":"","permalink":"http://yoursite.com/2019/07/14/LuoguP1338/","excerpt":"描述只要是参加jsoi活动的同学一定都听说过Hanoi塔的传说：三根柱子上的金片每天被移动一次，当所有的金片都被移完之后，世界末日也就随之降临了。 在古老东方的幻想乡，人们都采用一种奇特的方式记录日期：他们用一些特殊的符号来表示从1开始的连续整数，1表示最小而N表示最大。创世纪的第一天，日历就被赋予了生命，它自动地开始计数，就像排列不断地增加。 我们用1-N来表示日历的元素，第一天日历就是 1, 2, 3, … N 第二天，日历自动变为 1, 2, 3, … N, N-1 ……每次它都生成一个以前未出现过的“最小”的排列——把它转为N+1进制后数的数值最小。 日子一天一天地过着。有一天，一位预言者出现了——他预言道，当这个日历到达某个上帝安排的时刻，这个世界就会崩溃……他还预言到，假如某一个日期的逆序达到一个值M的时候，世界末日就要降临。 什么是逆序？日历中的两个不同符号，假如排在前面的那个比排在后面的那个更大，就是一个逆序，一个日期的逆序总数达到M后，末日就要降临，人们都期待一个贤者，能够预见那一天，到底将在什么时候到来？","text":"描述只要是参加jsoi活动的同学一定都听说过Hanoi塔的传说：三根柱子上的金片每天被移动一次，当所有的金片都被移完之后，世界末日也就随之降临了。 在古老东方的幻想乡，人们都采用一种奇特的方式记录日期：他们用一些特殊的符号来表示从1开始的连续整数，1表示最小而N表示最大。创世纪的第一天，日历就被赋予了生命，它自动地开始计数，就像排列不断地增加。 我们用1-N来表示日历的元素，第一天日历就是 1, 2, 3, … N 第二天，日历自动变为 1, 2, 3, … N, N-1 ……每次它都生成一个以前未出现过的“最小”的排列——把它转为N+1进制后数的数值最小。 日子一天一天地过着。有一天，一位预言者出现了——他预言道，当这个日历到达某个上帝安排的时刻，这个世界就会崩溃……他还预言到，假如某一个日期的逆序达到一个值M的时候，世界末日就要降临。 什么是逆序？日历中的两个不同符号，假如排在前面的那个比排在后面的那个更大，就是一个逆序，一个日期的逆序总数达到M后，末日就要降临，人们都期待一个贤者，能够预见那一天，到底将在什么时候到来？ 输入输出格式输入格式只包含一行两个正整数，分别为N和M。 输出格式输出一行，为世界末日的日期，每个数字之间用一个空格隔开。 输入输出样例输入样例1：5 4输出样例1：1 3 5 4 2说明对于10%的数据有N &lt;= 10。 对于40%的数据有N &lt;= 1000。 对于100%的数据有 N &lt;= 50000。 所有数据均有解。 题解题目意思看了半天没看懂搜了题解看到的题意。意思是给你一个N，让你在1-N的序列中找到一个序列使得这个序列的逆序对的个数满足M,并且该序列的字典序最小。 对于一个序列，它的最大逆序对的个数给n*(n-1)/2，即该序列严格降序。所以当我们按位来考虑这个序列的逆序数时，我们去判断这一位对该序列逆序对的贡献是否比M大。例如N = 5，M = 4.我们在考虑1的时候可以计算得出，剩下的4位数可以产生的最大逆序对的个数是比M大的，所以这个1可有可无，我们就可以把他放到序列的最前端。而到了2时我们发现，去掉了这个2是无法满足逆序对大于M的要求，此时按照贪心我们把2放到最后，这样可以使2这个数产生的逆序对最多，也就使M减小的最多，进而影响后面我们可以找到跟多的无关元素。这样就好写了。对于每个数都有两种方式 去掉当前数，剩下的数仍可构成比M多个逆序对把当前数放到后方，让M-（当前数提供的逆序对的个数）这样直接O(n)的时间复杂度就过去了(要开long long)。 代码1234567891011121314151617181920212223242526#include &lt;bits/stdc++.h&gt;typedef long long ll;const int MAXN = 1e5+7;const int INF = 0x7fffffff;using namespace std;ll a[MAXN]; int main() &#123; ll n,m; cin &gt;&gt; n &gt;&gt; m; ll ans[MAXN],l = 1,r = n; for(ll i = 1; i &lt;= n; i++) &#123; ll t = (n-i)*(n-i-1)/2; if(t &gt;= m) &#123; ans[l] = i; l++; &#125; else &#123; ans[r] = i; r--; m -= (r - l + 1); &#125; &#125; for(ll i = 1; i &lt;= n; i++) cout &lt;&lt; ans[i] &lt;&lt; \" \"; return 0;&#125;","categories":[{"name":"思维","slug":"思维","permalink":"http://yoursite.com/categories/思维/"}],"tags":[{"name":"思维","slug":"思维","permalink":"http://yoursite.com/tags/思维/"}]},{"title":"琪露诺","slug":"Luogu1725","date":"2019-07-11T14:11:24.800Z","updated":"2019-07-14T11:55:39.461Z","comments":true,"path":"2019/07/11/Luogu1725/","link":"","permalink":"http://yoursite.com/2019/07/11/Luogu1725/","excerpt":"描述在幻想乡，琪露诺是以笨蛋闻名的冰之妖精。 某一天，琪露诺又在玩速冻青蛙，就是用冰把青蛙瞬间冻起来。但是这只青蛙比以往的要聪明许多，在琪露诺来之前就已经跑到了河的对岸。于是琪露诺决定到河岸去追青蛙。 小河可以看作一列格子依次编号为0到N，琪露诺只能从编号小的格子移动到编号大的格子。而且琪露诺按照一种特殊的方式进行移动，当她在格子i时，她只移动到区间[i+l,i+r]中的任意一格。你问为什么她这么移动，这还不简单，因为她是笨蛋啊。 每一个格子都有一个冰冻指数A[i]，编号为0的格子冰冻指数为0。当琪露诺停留在那一格时就可以得到那一格的冰冻指数A[i]。琪露诺希望能够在到达对岸时，获取最大的冰冻指数，这样她才能狠狠地教训那只青蛙。 但是由于她实在是太笨了，所以她决定拜托你帮它决定怎样前进。 开始时，琪露诺在编号0的格子上，只要她下一步的位置编号大于N就算到达对岸。","text":"描述在幻想乡，琪露诺是以笨蛋闻名的冰之妖精。 某一天，琪露诺又在玩速冻青蛙，就是用冰把青蛙瞬间冻起来。但是这只青蛙比以往的要聪明许多，在琪露诺来之前就已经跑到了河的对岸。于是琪露诺决定到河岸去追青蛙。 小河可以看作一列格子依次编号为0到N，琪露诺只能从编号小的格子移动到编号大的格子。而且琪露诺按照一种特殊的方式进行移动，当她在格子i时，她只移动到区间[i+l,i+r]中的任意一格。你问为什么她这么移动，这还不简单，因为她是笨蛋啊。 每一个格子都有一个冰冻指数A[i]，编号为0的格子冰冻指数为0。当琪露诺停留在那一格时就可以得到那一格的冰冻指数A[i]。琪露诺希望能够在到达对岸时，获取最大的冰冻指数，这样她才能狠狠地教训那只青蛙。 但是由于她实在是太笨了，所以她决定拜托你帮它决定怎样前进。 开始时，琪露诺在编号0的格子上，只要她下一步的位置编号大于N就算到达对岸。 输入输出格式输入格式：第1行：3个正整数N, L, R 第2行：N+1个整数，第i个数表示编号为i-1的格子的冰冻指数A[i-1] 输出格式：一个整数，表示最大冰冻指数。保证不超过2^31-1 输入输出样例输入样例1：5 2 3 0 12 3 11 7 -2输出样例1：11说明对于60%的数据：N &lt;= 10,000 对于100%的数据：N &lt;= 200,000 对于所有数据 -1,000 &lt;= A[i] &lt;= 1,000且1 &lt;= L &lt;= R &lt;= N 题解看了题后不难想到这个题是个dp，而状态转移方程为dp[i] = max(dp[k]) (k &gt;=i+l &amp;&amp; k &lt;= i+r) + a[i]。如果暴力去dp会多了一层（l,r)的循环，可能会超时，所以对区间(l,r)进行优化，用单调队列进行优化。维护区间【l,r】的最大值即可。 代码123456789101112131415161718192021222324252627282930313233#include &lt;bits/stdc++.h&gt;typedef long long ll;const int INF = 0x3f3f3f3f;const int MAXN = 2e6+7;using namespace std;int a[MAXN];int dp[MAXN],q[MAXN]; //单调队列存的是下标 int main() &#123; int n,l,r; cin &gt;&gt; n &gt;&gt; l &gt;&gt; r; for(int i = 0;i &lt;= n;i++) cin &gt;&gt; a[i]; int head = 1,tail = 0,p = 0; int ans = -1; memset(dp,-1,sizeof(dp)); //对于所有的点初始值都为最小 dp[0] = 0;//在0点为0 for(int i = l;i &lt;= n;i++)&#123; //从0开始，第一个能跳的点就是l,往后依次判断 while(head &lt;= tail &amp;&amp; dp[q[tail]] &lt; dp[p]) tail--; //如果当前队列内的值小于最新的值，直接把他删去即可 tail++; q[tail] = p;//记录是第几个入队的 if(q[head] + r &lt; i) //如果此时队头的下标加上r比i小，要把队头删去 head++; dp[i] = dp[q[head]] + a[i]; p++; &#125; for(int i = n-r+1;i &lt;= n;i++) //对于能跳到对岸的点找一个最大值即可 ans = max(ans,dp[i]); cout &lt;&lt; ans &lt;&lt; endl; return 0;&#125;","categories":[{"name":"动态规划","slug":"动态规划","permalink":"http://yoursite.com/categories/动态规划/"}],"tags":[{"name":"dp","slug":"dp","permalink":"http://yoursite.com/tags/dp/"},{"name":"单调队列","slug":"单调队列","permalink":"http://yoursite.com/tags/单调队列/"}]},{"title":"to Splay","slug":"toSplay","date":"2018-09-12T13:00:00.000Z","updated":"2019-07-14T14:23:20.949Z","comments":true,"path":"2018/09/12/toSplay/","link":"","permalink":"http://yoursite.com/2018/09/12/toSplay/","excerpt":"故事伊始曾经想把代码精简，到最后AC才发现，这代码字里行间，全部都是她。 你看这颗可爱的线段树，它可以这样转，这样转，再这样转…….. 《驻马店不相信眼泪》zzzhy讲话实录","text":"故事伊始曾经想把代码精简，到最后AC才发现，这代码字里行间，全部都是她。 你看这颗可爱的线段树，它可以这样转，这样转，再这样转…….. 《驻马店不相信眼泪》zzzhy讲话实录 上面这两句经典语录是为了致敬我的卓哥，牺牲自己的恋爱时间来帮我搭博客（虽然他没有对象）。 博客就这样搭好了，这几天先拉些写过的水题充充场面。第一次搭建博客，好多地方都还不完善，欢迎各位指点，这个暑假会慢慢补充改进。 未完待续。。。","categories":[],"tags":[{"name":"人民艺术家 zzzhy","slug":"人民艺术家-zzzhy","permalink":"http://yoursite.com/tags/人民艺术家-zzzhy/"}]}]}